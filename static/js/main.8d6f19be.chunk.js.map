{"version":3,"sources":["components/Button/Button.tsx","components/Input/Input.tsx","components/Settings/Settings.tsx","components/Display/Display.tsx","Counter.tsx","reportWebVitals.ts","components/Display/DisplayCombined.tsx","components/Settings/SettingsCombined.tsx","CounterCombined.tsx","index.tsx"],"names":["Button","props","onClick","disabled","name","Input","inputClassName","error","type","value","onChange","className","Settings","minValue","e","setMinValue","Number","currentTarget","setSettings","inputValidation","maxValue","setMaxValue","setCounter","settings","Display","increaseButtonDisable","counter","resetButtonDisable","displayClassName","Counter","useState","useEffect","counterValueString","localStorage","getItem","counterValueNumber","JSON","parse","minValueString","minValueNumber","maxValueString","maxValueNumber","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DisplayCombined","to","SettingsCombined","CounterCombined","path","exact","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d6f19be.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick?: () => void\r\n    disabled?: boolean | undefined\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <button onClick={props.onClick} disabled={props.disabled}>{props.name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error: boolean | undefined\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = (props) => {\r\n    const inputClassName = props.error ? 'error' : ''\r\n    return <input type=\"number\" value={props.value} onChange={props.onChange} className={inputClassName}/>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {Input} from \"../Input/Input\";\r\n\r\ntype CounterSettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (minValue: number) => void\r\n    setMaxValue: (maxValue: number) => void\r\n    setCounter: (counter: number) => void\r\n    inputValidation: boolean | undefined\r\n    settings: boolean\r\n    setSettings: (settings: boolean) => void\r\n}\r\n\r\nexport const Settings: React.FC<CounterSettingsPropsType> = (props) => {\r\n    const declareMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMinValue(Number(e.currentTarget.value))\r\n        props.setSettings(false)\r\n    }\r\n\r\n    const declareMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxValue(Number(e.currentTarget.value))\r\n        props.setSettings(false)\r\n    }\r\n\r\n    const setMinValueToCounter = () => {\r\n        props.setCounter(props.minValue)\r\n        props.setSettings(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className={'settingsInputWrapper'}>\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Min value</span>\r\n                    <Input value={props.minValue}\r\n                           onChange={declareMinValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Max value</span>\r\n                    <Input value={props.maxValue}\r\n                           onChange={declareMaxValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Set'} onClick={setMinValueToCounter}\r\n                        disabled={props.settings || props.inputValidation}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\n\r\ntype CounterDisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    setCounter: (counter: number) => void\r\n    inputValidation: boolean | undefined\r\n    settings: boolean\r\n}\r\n\r\nexport const Display: React.FC<CounterDisplayPropsType> = (props) => {\r\n    const counterIncrease = () => props.counter < props.maxValue && props.setCounter(props.counter + 1)\r\n    const counterReset = () => props.setCounter(props.minValue)\r\n\r\n    const increaseButtonDisable = props.counter === props.maxValue || !props.settings || props.inputValidation\r\n    const resetButtonDisable = props.counter === props.minValue || !props.settings || props.inputValidation\r\n\r\n    const displayClassName = props.counter === props.maxValue ? 'result maxResult' : 'result'\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={'display'}>\r\n                {\r\n                    props.inputValidation ? <span className={'result displayTextError'}> Incorrect value! </span> :\r\n                        !props.settings ? <span className={'result displayText'}> Enter values and press 'Set' </span> :\r\n                            <span className={displayClassName}>{props.counter}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Increase'}\r\n                        onClick={counterIncrease}\r\n                        disabled={increaseButtonDisable}/>\r\n                <Button name={'Reset'}\r\n                        onClick={counterReset}\r\n                        disabled={resetButtonDisable}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Settings} from \"./components/Settings/Settings\";\nimport {Display} from \"./components/Display/Display\";\n\nexport const Counter = () => {\n    const [minValue, setMinValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [settings, setSettings] = useState(true)\n    const [counter, setCounter] = useState<number>(minValue)\n\n    useEffect(() => {\n        const counterValueString = localStorage.getItem('counter')\n        if (counterValueString) {\n            const counterValueNumber = JSON.parse(counterValueString)\n            setCounter(counterValueNumber)\n        }\n\n        const minValueString = localStorage.getItem('minValue')\n        if (minValueString) {\n            const minValueNumber = JSON.parse(minValueString)\n            setMinValue(minValueNumber)\n        }\n\n        const maxValueString = localStorage.getItem('maxValue')\n        if (maxValueString) {\n            const maxValueNumber = JSON.parse(maxValueString)\n            setMaxValue(maxValueNumber)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('counter', JSON.stringify(counter))\n        localStorage.setItem('minValue', JSON.stringify(minValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }, [counter, minValue, maxValue])\n\n    const inputValidation = minValue >= maxValue || minValue < 0 || maxValue < 0\n\n    return (\n        <div className={'wrapper'}>\n            <Settings maxValue={maxValue}\n                      minValue={minValue}\n                      setMinValue={setMinValue}\n                      setMaxValue={setMaxValue}\n                      setCounter={setCounter}\n                      inputValidation={inputValidation}\n                      settings={settings}\n                      setSettings={setSettings}\n            />\n\n            <Display counter={counter}\n                     maxValue={maxValue}\n                     minValue={minValue}\n                     setCounter={setCounter}\n                     inputValidation={inputValidation}\n                     settings={settings}\n            />\n        </div>\n    );\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ntype CounterDisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    setCounter: (counter: number) => void\r\n    inputValidation: boolean | undefined\r\n    settings: boolean\r\n}\r\n\r\nexport const DisplayCombined: React.FC<CounterDisplayPropsType> = (props) => {\r\n    const counterIncrease = () => props.counter < props.maxValue && props.setCounter(props.counter + 1)\r\n    const counterReset = () => props.setCounter(props.minValue)\r\n\r\n    const increaseButtonDisable = props.counter === props.maxValue || !props.settings || props.inputValidation\r\n    const resetButtonDisable = props.counter === props.minValue || !props.settings || props.inputValidation\r\n\r\n    const displayClassName = props.counter === props.maxValue ? 'result maxResult' : 'result'\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={'display'}>\r\n                {\r\n                    props.inputValidation ? <span className={'result displayTextError'}> Incorrect value! </span> :\r\n                        !props.settings ? <span className={'result displayText'}> Enter values and press 'Set' </span> :\r\n                            <span className={displayClassName}>{props.counter}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Increase'}\r\n                        onClick={counterIncrease}\r\n                        disabled={increaseButtonDisable}/>\r\n                <Button name={'Reset'}\r\n                        onClick={counterReset}\r\n                        disabled={resetButtonDisable}/>\r\n\r\n                <Link to={'/settings'}>\r\n                    <Button name={'Set'}/>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {Input} from \"../Input/Input\";\r\n\r\ntype CounterSettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (minValue: number) => void\r\n    setMaxValue: (maxValue: number) => void\r\n    setCounter: (counter: number) => void\r\n    inputValidation: boolean | undefined\r\n    settings: boolean\r\n    setSettings: (settings: boolean) => void\r\n}\r\n\r\nexport const SettingsCombined: React.FC<CounterSettingsPropsType> = (props) => {\r\n    const declareMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMinValue(Number(e.currentTarget.value))\r\n        props.setSettings(false)\r\n    }\r\n\r\n    const declareMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxValue(Number(e.currentTarget.value))\r\n        props.setSettings(false)\r\n    }\r\n\r\n    const setMinValueToCounter = () => {\r\n        props.setCounter(props.minValue)\r\n        props.setSettings(true)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className={'settingsInputWrapper'}>\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Min value</span>\r\n                    <Input value={props.minValue}\r\n                           onChange={declareMinValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Max value</span>\r\n                    <Input value={props.maxValue}\r\n                           onChange={declareMaxValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Link to={'/display'}>\r\n                    <Button name={'Set'} onClick={setMinValueToCounter}\r\n                            disabled={props.inputValidation}/>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {HashRouter, Redirect, Route} from \"react-router-dom\";\nimport {DisplayCombined} from \"./components/Display/DisplayCombined\";\nimport {SettingsCombined} from \"./components/Settings/SettingsCombined\";\n\nexport const CounterCombined = () => {\n    const [minValue, setMinValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [settings, setSettings] = useState(true)\n    const [counter, setCounter] = useState<number>(minValue)\n\n    useEffect(() => {\n        const counterValueString = localStorage.getItem('counterCombined')\n        if (counterValueString) {\n            const counterValueNumber = JSON.parse(counterValueString)\n            setCounter(counterValueNumber)\n        }\n\n        const minValueString = localStorage.getItem('minValueCombined')\n        if (minValueString) {\n            const minValueNumber = JSON.parse(minValueString)\n            setMinValue(minValueNumber)\n        }\n\n        const maxValueString = localStorage.getItem('maxValueCombined')\n        if (maxValueString) {\n            const maxValueNumber = JSON.parse(maxValueString)\n            setMaxValue(maxValueNumber)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('counterCombined', JSON.stringify(counter))\n        localStorage.setItem('minValueCombined', JSON.stringify(minValue))\n        localStorage.setItem('maxValueCombined', JSON.stringify(maxValue))\n    }, [counter, minValue, maxValue])\n\n    const inputValidation = minValue >= maxValue || minValue < 0 || maxValue < 0\n\n    return (\n        <div className={'wrapper'}>\n            <HashRouter>\n                <Route path={'/'} exact render={() => <Redirect to={'/display'}/>}/>\n                <Route path={'/settings'} render={() => <SettingsCombined maxValue={maxValue}\n                                                                          minValue={minValue}\n                                                                          setMinValue={setMinValue}\n                                                                          setMaxValue={setMaxValue}\n                                                                          setCounter={setCounter}\n                                                                          inputValidation={inputValidation}\n                                                                          settings={settings}\n                                                                          setSettings={setSettings}\n                />}/>\n                <Route path={'/display'} render={() => <DisplayCombined counter={counter}\n                                                                        maxValue={maxValue}\n                                                                        minValue={minValue}\n                                                                        setCounter={setCounter}\n                                                                        inputValidation={inputValidation}\n                                                                        settings={settings}\n                />}/>\n            </HashRouter>\n        </div>\n    );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Counter} from './Counter';\nimport reportWebVitals from './reportWebVitals';\nimport {CounterCombined} from \"./CounterCombined\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Counter/>\n        <CounterCombined/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}