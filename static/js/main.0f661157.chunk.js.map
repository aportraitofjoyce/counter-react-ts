{"version":3,"sources":["reportWebVitals.ts","store/actions/counter-actions.ts","store/reducers/counter-reducer.ts","store/actions/counter-values-actions.ts","store/reducers/counter-values-reducer.ts","store/store.ts","components/Button/Button.tsx","components/Input/Input.tsx","components/Counter/Settings/Settings.tsx","components/Counter/Display/Display.tsx","components/Counter/Counter.tsx","components/Counter/CounterContainer.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","COUNTER_INCREASE","COUNTER_RESET","SET_NEW_MIN_COUNTER_VALUE","initialState","counterValue","SET_MIN_VALUE","SET_MAX_VALUE","minValue","maxValue","rootReducer","combineReducers","counter","state","action","type","value","counterValues","store","createStore","Button","props","onClick","disabled","name","Input","inputClassName","error","onChange","className","Settings","setMinValue","inputValidation","setMaxValue","setNewMinCounterValue","settings","Display","displayClassName","counterIncrease","buttonsValidation","increaseButtonDisable","counterReset","resetButtonDisable","Counter","CounterContainer","useState","setSettings","useSelector","dispatch","useDispatch","e","Number","currentTarget","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f661157.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const COUNTER_INCREASE = 'COUNTER_INCREASE'\r\nexport const COUNTER_RESET = 'COUNTER_RESET'\r\nexport const SET_NEW_MIN_COUNTER_VALUE = 'SET_NEW_MIN_COUNTER_VALUE'\r\n\r\nexport const counterIncreaseAC = () => ({\r\n    type: COUNTER_INCREASE,\r\n}) as const\r\n\r\nexport const counterResetAC = (value: number) => ({\r\n    type: COUNTER_RESET,\r\n    value: value\r\n}) as const\r\n\r\nexport const setNewMinCounterValueAC = (value: number) => ({\r\n    type: SET_NEW_MIN_COUNTER_VALUE,\r\n    value: value\r\n})\r\n\r\nexport type CounterActionsType =\r\n    ReturnType<typeof counterIncreaseAC> |\r\n    ReturnType<typeof counterResetAC> |\r\n    ReturnType<typeof setNewMinCounterValueAC>","import {\r\n    COUNTER_INCREASE,\r\n    COUNTER_RESET,\r\n    CounterActionsType,\r\n    SET_NEW_MIN_COUNTER_VALUE\r\n} from '../actions/counter-actions'\r\n\r\nconst initialState = {\r\n    counterValue: 0,\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: CounterActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case COUNTER_INCREASE:\r\n            return {...state, counterValue: state.counterValue + 1}\r\n\r\n        case COUNTER_RESET:\r\n            return {...state, counterValue: action.value}\r\n\r\n        case SET_NEW_MIN_COUNTER_VALUE:\r\n            return {...state, counterValue: action.value}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n","export const SET_MIN_VALUE = 'SET_MIN_VALUE'\r\nexport const SET_MAX_VALUE = 'SET_MAX_VALUE'\r\n\r\nexport const setMinValueAC = (minValue: number) => ({\r\n    type: SET_MIN_VALUE,\r\n    minValue: minValue\r\n}) as const\r\n\r\nexport const setMaxValueAC = (maxValue: number) => ({\r\n    type: SET_MAX_VALUE,\r\n    maxValue: maxValue\r\n}) as const\r\n\r\n\r\nexport type CounterValuesActionsType = ReturnType<typeof setMinValueAC> | ReturnType<typeof setMaxValueAC>","import {CounterValuesActionsType, SET_MAX_VALUE, SET_MIN_VALUE} from '../actions/counter-values-actions'\r\n\r\nconst initialState = {\r\n    minValue: 0,\r\n    maxValue: 5,\r\n}\r\n\r\nexport const counterValuesReducer = (state: InitialStateType = initialState, action: CounterValuesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_MIN_VALUE:\r\n            return {...state, minValue: action.minValue}\r\n\r\n        case SET_MAX_VALUE:\r\n            return {...state, maxValue: action.maxValue}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype InitialStateType = typeof initialState","import {combineReducers, createStore} from 'redux'\r\nimport {counterReducer} from './reducers/counter-reducer'\r\nimport {counterValuesReducer} from './reducers/counter-values-reducer'\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        counter: counterReducer,\r\n        counterValues: counterValuesReducer\r\n    }\r\n)\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\ntype StoreType = typeof store","import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick?: () => void\r\n    disabled?: boolean | undefined\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <button onClick={props.onClick} disabled={props.disabled}>{props.name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error: boolean | undefined\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = (props) => {\r\n    const inputClassName = props.error ? 'error' : ''\r\n    return <input type=\"number\" value={props.value} onChange={props.onChange} className={inputClassName}/>\r\n}","import React from 'react'\r\nimport {Button} from '../../Button/Button'\r\nimport {Input} from '../../Input/Input'\r\n\r\ntype CounterSettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: any\r\n    setMaxValue: any\r\n    inputValidation: boolean | undefined\r\n    settings: boolean\r\n    setNewMinCounterValue: () => any\r\n}\r\n\r\nexport const Settings: React.FC<CounterSettingsPropsType> = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={'settingsInputWrapper'}>\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Min value</span>\r\n                    <Input value={props.minValue}\r\n                           onChange={props.setMinValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Max value</span>\r\n                    <Input value={props.maxValue}\r\n                           onChange={props.setMaxValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Set'} onClick={props.setNewMinCounterValue}\r\n                        disabled={props.settings || props.inputValidation}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Button} from '../../Button/Button'\r\nimport React from 'react'\r\n\r\ntype CounterDisplayPropsType = {\r\n    counterValue: number\r\n    maxValue: number\r\n    minValue: number\r\n    inputValidation: boolean | undefined\r\n    settings: boolean\r\n    counterIncrease: () => any\r\n    counterReset: () => any\r\n    buttonsValidation: { increaseButtonDisable: boolean, resetButtonDisable: boolean }\r\n}\r\n\r\nexport const Display: React.FC<CounterDisplayPropsType> = (props) => {\r\n    const displayClassName = props.counterValue === props.maxValue ? 'result maxResult' : 'result'\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={'display'}>\r\n                {\r\n                    props.inputValidation ? <span className={'result displayTextError'}> Incorrect value! </span> :\r\n                        !props.settings ? <span className={'result displayText'}> Enter values and press 'Set' </span> :\r\n                            <span className={displayClassName}>{props.counterValue}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Increase'}\r\n                        onClick={props.counterIncrease}\r\n                        disabled={props.buttonsValidation.increaseButtonDisable}/>\r\n                <Button name={'Reset'}\r\n                        onClick={props.counterReset}\r\n                        disabled={props.buttonsValidation.resetButtonDisable}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\nimport '../../App.css'\nimport {Settings} from './Settings/Settings'\nimport {Display} from './Display/Display'\n\ntype CounterPropsType = {\n    counterValue: number\n    maxValue: number\n    minValue: number\n    settings: boolean\n    inputValidation: boolean\n    setMinValue: (e: ChangeEvent<HTMLInputElement>) => void\n    setMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\n    setNewMinCounterValue: () => void\n    counterIncrease: () => void\n    counterReset: () => void\n    buttonsValidation: { increaseButtonDisable: boolean, resetButtonDisable: boolean }\n}\n\nexport const Counter: React.FC<CounterPropsType> = (props) => {\n    return (\n        <div className={'wrapper'}>\n            <Settings maxValue={props.maxValue}\n                      minValue={props.minValue}\n                      settings={props.settings}\n                      setMinValue={props.setMinValue}\n                      setMaxValue={props.setMaxValue}\n                      setNewMinCounterValue={props.setNewMinCounterValue}\n                      inputValidation={props.inputValidation}\n            />\n\n            <Display counterValue={props.counterValue}\n                     maxValue={props.maxValue}\n                     minValue={props.minValue}\n                     settings={props.settings}\n                     counterIncrease={props.counterIncrease}\n                     counterReset={props.counterReset}\n                     inputValidation={props.inputValidation}\n                     buttonsValidation={props.buttonsValidation}\n            />\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport {Counter} from './Counter'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {StateType} from '../../store/store'\r\nimport {counterIncreaseAC, counterResetAC, setNewMinCounterValueAC} from '../../store/actions/counter-actions'\r\nimport {setMaxValueAC, setMinValueAC} from '../../store/actions/counter-values-actions'\r\n\r\nexport const CounterContainer = () => {\r\n    const [settings, setSettings] = useState(true)\r\n    const counter = useSelector((state: StateType) => state.counter)\r\n    const counterValues = useSelector((state: StateType) => state.counterValues)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const counterIncrease = () => {\r\n        counter.counterValue < counterValues.maxValue && dispatch(counterIncreaseAC())\r\n    }\r\n\r\n    const counterReset = () => {\r\n        dispatch(counterResetAC(counterValues.minValue))\r\n    }\r\n\r\n    const setMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMinValueAC(Number(e.currentTarget.value)))\r\n        setSettings(false)\r\n    }\r\n\r\n    const setMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMaxValueAC(Number(e.currentTarget.value)))\r\n        setSettings(false)\r\n    }\r\n\r\n    const setNewMinCounterValue = () => {\r\n        dispatch(setNewMinCounterValueAC(counterValues.minValue))\r\n        setSettings(true)\r\n    }\r\n\r\n    const inputValidation = counterValues.minValue >= counterValues.maxValue || counterValues.minValue < 0 || counterValues.maxValue < 0\r\n\r\n    const buttonsValidation = {\r\n        increaseButtonDisable: counter.counterValue === counterValues.maxValue || !settings || inputValidation,\r\n        resetButtonDisable: counter.counterValue === counterValues.minValue || !settings || inputValidation\r\n    }\r\n    \r\n    /*useEffect(() => {\r\n        const counterValueString = localStorage.getItem('counter')\r\n        if (counterValueString) {\r\n            const counterValueNumber = JSON.parse(counterValueString)\r\n            setCounter(counterValueNumber)\r\n        }\r\n\r\n        const minValueString = localStorage.getItem('minValue')\r\n        if (minValueString) {\r\n            const minValueNumber = JSON.parse(minValueString)\r\n            setMinValue(minValueNumber)\r\n        }\r\n\r\n        const maxValueString = localStorage.getItem('maxValue')\r\n        if (maxValueString) {\r\n            const maxValueNumber = JSON.parse(maxValueString)\r\n            setMaxValue(maxValueNumber)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('counter', JSON.stringify(counter))\r\n        localStorage.setItem('minValue', JSON.stringify(minValue))\r\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n    }, [counter, minValue, maxValue])*/\r\n\r\n    return (\r\n        <>\r\n            <Counter counterValue={counter.counterValue}\r\n                     minValue={counterValues.minValue}\r\n                     maxValue={counterValues.maxValue}\r\n                     settings={settings}\r\n                     counterIncrease={counterIncrease}\r\n                     counterReset={counterReset}\r\n                     setMinValue={setMinValue}\r\n                     setMaxValue={setMaxValue}\r\n                     setNewMinCounterValue={setNewMinCounterValue}\r\n                     inputValidation={inputValidation}\r\n                     buttonsValidation={buttonsValidation}\r\n\r\n            />\r\n        </>\r\n    )\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport {CounterCombined} from './components/CounterCombined/CounterCombined'\nimport {Provider} from 'react-redux'\nimport {store} from './store/store'\nimport {CounterContainer} from './components/Counter/CounterContainer'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <CounterContainer/>\n            {/*<CounterCombined/>*/}\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}