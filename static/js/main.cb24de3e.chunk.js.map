{"version":3,"sources":["components/Button.tsx","components/Input.tsx","components/CounterSettings/CounterSettings.tsx","components/CounterDisplay/Display.tsx","components/CounterDisplay/CounterDisplay.tsx","Counter.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","onClick","disabled","name","Input","inputClassName","error","type","value","onChange","className","CounterSettings","minValue","e","setMinValue","Number","currentTarget","setSettings","inputValidation","maxValue","setMaxValue","setCounter","settings","Display","displayClassName","counter","CounterDisplay","Counter","useState","useEffect","counterValueString","localStorage","getItem","counterValueNumber","JSON","parse","minValueString","minValueNumber","maxValueString","maxValueNumber","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb24de3e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick: () => void\r\n    disabled: any\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <button onClick={props.onClick} disabled={props.disabled}>{props.name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error: boolean | undefined\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = (props) => {\r\n    const inputClassName = props.error ? 'error' : ''\r\n    return <input type=\"number\" value={props.value} onChange={props.onChange} className={inputClassName}/>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"../Button\";\r\nimport {Input} from \"../Input\";\r\n\r\ntype CounterSettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (minValue: number) => void\r\n    setMaxValue: (maxValue: number) => void\r\n    setCounter: (counter: number) => void\r\n    inputValidation: () => boolean | undefined\r\n    settings: boolean\r\n    setSettings: (settings: boolean) => void\r\n}\r\n\r\nexport const CounterSettings: React.FC<CounterSettingsPropsType> = (props) => {\r\n\r\n    const declareMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMinValue(Number(e.currentTarget.value))\r\n        props.setSettings(false)\r\n    }\r\n\r\n    const declareMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxValue(Number(e.currentTarget.value))\r\n        props.setSettings(false)\r\n    }\r\n\r\n    const setMinValueToCounter = () => {\r\n        props.setCounter(props.minValue)\r\n        props.setSettings(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className={'settingsInputContainer'}>\r\n                <span>Min value</span>\r\n                <Input value={props.minValue}\r\n                       onChange={declareMinValue}\r\n                       error={props.inputValidation()}/>\r\n\r\n            </div>\r\n\r\n            <div className={'settingsInputContainer'}>\r\n                <span>Max value</span>\r\n                <Input value={props.maxValue}\r\n                       onChange={declareMaxValue}\r\n                       error={props.inputValidation()}/>\r\n\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Set'} onClick={setMinValueToCounter}\r\n                        disabled={props.settings}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    inputValidation: () => boolean | undefined\r\n    settings: boolean\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    const displayClassName = props.counter === props.maxValue ? 'result maxResult' : 'result'\r\n\r\n    return (\r\n        <div className={'display'}>\r\n            {\r\n                props.inputValidation() ? <span className={'result maxResult'}>Incorrect value!</span> :\r\n                    !props.settings ? <span className={'result'}>Enter values and press 'Set'</span> :\r\n                        <span className={displayClassName}>{props.counter}</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import {Display} from \"./Display\";\r\nimport {Button} from \"../Button\";\r\nimport React from \"react\";\r\n\r\ntype CounterDisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    setCounter: (counter: number) => void\r\n    inputValidation: () => boolean | undefined\r\n    settings: boolean\r\n}\r\n\r\nexport const CounterDisplay: React.FC<CounterDisplayPropsType> = (props) => {\r\n    const counterIncrease = () => {\r\n        props.counter < props.maxValue && props.setCounter(props.counter + 1)\r\n    }\r\n\r\n    const counterReset = () => {\r\n        props.setCounter(props.minValue)\r\n    }\r\n\r\n    const increaseButtonDisable = () => props.counter === props.maxValue || !props.settings\r\n    const resetButtonDisable = () => props.counter === props.minValue || !props.settings\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Display counter={props.counter}\r\n                     maxValue={props.maxValue}\r\n                     inputValidation={props.inputValidation}\r\n                     minValue={props.minValue}\r\n                     settings={props.settings}\r\n            />\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Increase'}\r\n                        onClick={counterIncrease}\r\n                        disabled={increaseButtonDisable()}/>\r\n                <Button name={'Reset'}\r\n                        onClick={counterReset}\r\n                        disabled={resetButtonDisable()}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {CounterSettings} from \"./components/CounterSettings/CounterSettings\";\nimport {CounterDisplay} from \"./components/CounterDisplay/CounterDisplay\";\n\nexport const Counter = () => {\n    const [minValue, setMinValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [settings, setSettings] = useState(true)\n    const [counter, setCounter] = useState<number>(minValue)\n\n    useEffect(() => {\n        const counterValueString = localStorage.getItem('counter')\n        if (counterValueString) {\n            const counterValueNumber = JSON.parse(counterValueString)\n            setCounter(counterValueNumber)\n        }\n\n        const minValueString = localStorage.getItem('minValue')\n        if (minValueString) {\n            const minValueNumber = JSON.parse(minValueString)\n            setMinValue(minValueNumber)\n        }\n\n        const maxValueString = localStorage.getItem('maxValue')\n        if (maxValueString) {\n            const maxValueNumber = JSON.parse(maxValueString)\n            setMaxValue(maxValueNumber)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('counter', JSON.stringify(counter))\n        localStorage.setItem('minValue', JSON.stringify(minValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }, [counter, minValue, maxValue])\n\n    const inputValidation = () => {\n        if (minValue >= maxValue) {\n            setSettings(true)\n            return true\n        }\n        if (minValue < 0 || maxValue < 0) {\n            setSettings(true)\n            return true\n        }\n    }\n\n    return (\n        <div className={'wrapper'}>\n            <CounterSettings maxValue={maxValue}\n                             minValue={minValue}\n                             setMinValue={setMinValue}\n                             setMaxValue={setMaxValue}\n                             setCounter={setCounter}\n                             inputValidation={inputValidation}\n                             settings={settings}\n                             setSettings={setSettings}\n            />\n\n            <CounterDisplay counter={counter}\n                            maxValue={maxValue}\n                            minValue={minValue}\n                            setCounter={setCounter}\n                            inputValidation={inputValidation}\n                            settings={settings}\n            />\n        </div>\n    );\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Counter} from './Counter';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Counter/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}