{"version":3,"sources":["reportWebVitals.ts","store/actions/counter-actions/counter-actions.ts","store/reducers/counter-reducers/counter-reducer.ts","store/actions/counter-actions/counter-values-actions.ts","store/reducers/counter-reducers/counter-values-reducer.ts","store/actions/combined-counter-actions/combined-counter-actions.ts","store/reducers/combined-counter-reducers/combined-counter-reducer.ts","store/actions/combined-counter-actions/combined-counter-values-actions.ts","store/reducers/combined-counter-reducers/combined-counter-values-reducer.ts","store/store.ts","utils/local-storage-utils.ts","components/Button/Button.tsx","components/Input/Input.tsx","components/Counter/Settings/Settings.tsx","components/Counter/Display/Display.tsx","components/Counter/Counter.tsx","components/Counter/CounterContainer.tsx","components/CombinedCounter/Display/DisplayCombined.tsx","components/CombinedCounter/Settings/SettingsCombined.tsx","components/CombinedCounter/CombinedCounter.tsx","components/CombinedCounter/CombinedCounterContainer.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","COUNTER_INCREASE","COUNTER_RESET","SET_NEW_MIN_COUNTER_VALUE","initialState","counterValue","SET_MIN_VALUE","SET_MAX_VALUE","minValue","maxValue","rootReducer","combineReducers","counter","state","action","type","payload","counterValues","combinedCounter","combinedCounterValues","store","createStore","preloadedState","localStorage","getItem","undefined","JSON","parse","err","loadState","subscribe","loadedState","stringify","setItem","saveState","getState","Button","props","onClick","disabled","name","Input","inputClassName","error","value","onChange","className","Settings","setMinValue","inputValidation","setMaxValue","setNewMinCounterValue","buttonsValidation","Display","displayClassName","settings","counterIncrease","increaseButtonDisable","counterReset","resetButtonDisable","Counter","setButtonDisable","CounterContainer","useSelector","useState","setSettings","dispatch","useDispatch","counterResetAC","e","setMinValueAC","Number","currentTarget","setMaxValueAC","setNewMinCounterValueAC","DisplayCombined","to","SettingsCombined","CombinedCounter","path","exact","render","CombinedCounterContainer","ReactDOM","StrictMode","document","getElementById"],"mappings":"yLAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sBCTDQ,EAAmB,2BACnBC,EAAgB,wBAChBC,EAA4B,oCCOnCC,EAAe,CACjBC,aAAc,GCVLC,EAAgB,wBAChBC,EAAgB,wBCOvBH,EAAe,CACjBI,SAAU,EACVC,SAAU,GCVDR,EAAmB,mCACnBC,EAAgB,gCAChBC,EAA4B,4CCKnCC,EAAe,CACjBC,aAAc,GCRLC,EAAgB,gCAChBC,EAAgB,gCCMvBH,EAAe,CACjBI,SAAU,EACVC,SAAU,GCARC,EAAcC,YAChB,CACIC,QPEsB,WAA2F,IAA1FC,EAAyF,uDAA/DT,EAAcU,EAAiD,uCACpH,OAAQA,EAAOC,MACX,KAAKd,EACD,OAAO,2BAAIY,GAAX,IAAkBR,aAAcQ,EAAMR,aAAe,IAEzD,KAAKH,EACL,KAAKC,EACD,OAAO,2BAAIU,GAAX,IAAkBR,aAAcS,EAAOE,UAE3C,QACI,OAAOH,IOXXI,cLC4B,WAAiG,IAAhGJ,EAA+F,uDAArET,EAAcU,EAAuD,uCAChI,OAAQA,EAAOC,MACX,KAAKT,EACD,OAAO,2BAAIO,GAAX,IAAkBL,SAAUM,EAAOE,UAEvC,KAAKT,EACD,OAAO,2BAAIM,GAAX,IAAkBJ,SAAUK,EAAOE,UAEvC,QACI,OAAOH,IKTXK,gBHF8B,WAAmG,IAAlGL,EAAiG,uDAAvET,EAAcU,EAAyD,uCACpI,OAAQA,EAAOC,MACX,KAAKd,EACD,OAAO,2BAAIY,GAAX,IAAkBR,aAAcQ,EAAMR,aAAe,IAEzD,KAAKH,EAGL,KAAKC,EACD,OAAO,2BAAIU,GAAX,IAAkBR,aAAcS,EAAOE,UAG3C,QACI,OAAOH,IGVXM,sBDFoC,WAAyG,IAAxGN,EAAuG,uDAA7ET,EAAcU,EAA+D,uCAChJ,OAAQA,EAAOC,MACX,KAAKT,EACD,OAAO,2BAAIO,GAAX,IAAkBL,SAAUM,EAAOE,UAEvC,KAAKT,EACD,OAAO,2BAAIM,GAAX,IAAkBJ,SAAUK,EAAOE,UAEvC,QACI,OAAOH,MCHNO,EAAQC,YAAYX,EChBR,WACrB,IACI,IAAMY,EAAiBC,aAAaC,QAAQ,SAC5C,OAA0B,OAAnBF,OAA0BG,EAAYC,KAAKC,MAAML,GAC1D,MAAOM,GACL,QDWsCC,IAE9CT,EAAMU,WAAU,YCTS,SAACjB,GACtB,IACI,IAAMkB,EAAcL,KAAKM,UAAUnB,GACnCU,aAAaU,QAAQ,QAASF,GAChC,WDMFG,CAAUd,EAAMe,e,2BEbPC,EAAoC,SAACC,GAC9C,OACI,wBAAQC,QAASD,EAAMC,QAASC,SAAUF,EAAME,SAAhD,SAA2DF,EAAMG,QCF5DC,EAAkC,SAACJ,GAC5C,IAAMK,EAAiBL,EAAMM,MAAQ,QAAU,GAC/C,OAAO,uBAAO5B,KAAK,SAAS6B,MAAOP,EAAMO,MAAOC,SAAUR,EAAMQ,SAAUC,UAAWJ,KCK5EK,EAA+C,SAACV,GACzD,OACI,sBAAKS,UAAU,YAAf,UACI,sBAAKA,UAAW,uBAAhB,UACI,sBAAKA,UAAW,yBAAhB,UACI,6CACA,cAAC,EAAD,CAAOF,MAAOP,EAAM7B,SACbqC,SAAUR,EAAMW,YAChBL,MAAON,EAAMY,qBAGxB,sBAAKH,UAAW,yBAAhB,UACI,6CACA,cAAC,EAAD,CAAOF,MAAOP,EAAM5B,SACboC,SAAUR,EAAMa,YAChBP,MAAON,EAAMY,wBAI5B,qBAAKH,UAAW,UAAhB,SACI,cAAC,EAAD,CAAQN,KAAM,MAAOF,QAASD,EAAMc,sBAC5BZ,SAAUF,EAAMe,0BCnB3BC,EAA6C,SAAChB,GACvD,IAAMiB,EAAmBjB,EAAMhC,eAAiBgC,EAAM5B,SAAW,mBAAqB,SAEtF,OACI,sBAAKqC,UAAU,YAAf,UACI,qBAAKA,UAAW,UAAhB,SAEQT,EAAMY,gBACA,sBAAMH,UAAW,0BAAjB,gCACCT,EAAMkB,SAEH,sBAAMT,UAAWQ,EAAjB,SAAoCjB,EAAMhC,eAD1C,sBAAMyC,UAAW,qBAAjB,8CAKlB,sBAAKA,UAAW,UAAhB,UACI,cAAC,EAAD,CAAQN,KAAM,WACNF,QAASD,EAAMmB,gBACfjB,SAAUF,EAAMe,kBAAkBK,wBAC1C,cAAC,EAAD,CAAQjB,KAAM,QACNF,QAASD,EAAMqB,aACfnB,SAAUF,EAAMe,kBAAkBO,4BCb7CC,EAAsC,SAACvB,GAChD,OACI,sBAAKS,UAAW,UAAhB,UACI,cAAC,EAAD,CAAUrC,SAAU4B,EAAM5B,SAChBD,SAAU6B,EAAM7B,SAChB+C,SAAUlB,EAAMkB,SAChBP,YAAaX,EAAMW,YACnBE,YAAab,EAAMa,YACnBC,sBAAuBd,EAAMc,sBAC7BC,kBAAmBf,EAAMe,kBAAkBS,iBAC3CZ,gBAAiBZ,EAAMY,kBAGjC,cAAC,EAAD,CAAS5C,aAAcgC,EAAMhC,aACpBI,SAAU4B,EAAM5B,SAChBD,SAAU6B,EAAM7B,SAChB+C,SAAUlB,EAAMkB,SAChBC,gBAAiBnB,EAAMmB,gBACvBE,aAAcrB,EAAMqB,aACpBT,gBAAiBZ,EAAMY,gBACvBG,kBAAmBf,EAAMe,wBClCjCU,EAAmB,WAAO,IAC5BzD,EAAgB0D,aAAY,SAAClD,GAAD,OAAsBA,EAAMD,WAAxDP,aAD2B,EAEL0D,aAAY,SAAClD,GAAD,OAAsBA,EAAMI,iBAA9DT,EAF2B,EAE3BA,SAAUC,EAFiB,EAEjBA,SAFiB,EAGFuD,oBAAS,GAHP,mBAG3BT,EAH2B,KAGjBU,EAHiB,KAI5BC,EAAWC,cAyBXlB,EAAkBzC,GAAYC,GAAYD,EAAW,GAAKC,EAAW,EAErE2C,EAAoB,CACtBK,sBAAuBpD,IAAiBI,IAAa8C,GAAYN,EACjEU,mBAAoBtD,IAAiBG,IAAa+C,GAAYN,EAC9DY,iBAAkBN,GAAYN,GAGlC,OACI,mCACI,cAAC,EAAD,CAAS5C,aAAcA,EACdG,SAAUA,EACVC,SAAUA,EACV8C,SAAUA,EACVC,gBArCO,WACpBnD,EAAeI,GAAYyD,EfdK,CACpCnD,KAAMd,KekDWyD,aAlCI,WACjBQ,EfdsB,SAAC1D,GAAD,MAAuB,CACjDO,KAAMb,EACNc,QAASR,GeYI4D,CAAe5D,KAkCXwC,YA/BG,SAACqB,GACjBH,EbvBqB,SAAC1D,GAAD,MAAuB,CAChDO,KAAMT,EACNU,QAASR,GaqBI8D,CAAcC,OAAOF,EAAEG,cAAc5B,SAC9CqB,GAAY,IA8BCf,YA3BG,SAACmB,GACjBH,EbvBqB,SAACzD,GAAD,MAAuB,CAChDM,KAAMR,EACNS,QAASP,GaqBIgE,CAAcF,OAAOF,EAAEG,cAAc5B,SAC9CqB,GAAY,IA0BCd,sBAvBa,WAC1Be,EfvB+B,SAAC1D,GAAD,MAAuB,CAC1DO,KAAMZ,EACNa,QAASR,GeqBIkE,CAAwBlE,IACjCyD,GAAY,IAsBChB,gBAAiBA,EACjBG,kBAAmBA,O,cC1C3BuB,EAAsD,SAACtC,GAChE,IAAMiB,EAAmBjB,EAAMhC,eAAiBgC,EAAM5B,SAAW,mBAAqB,SAEtF,OACI,sBAAKqC,UAAU,YAAf,UACI,qBAAKA,UAAW,UAAhB,SAEQT,EAAMY,gBAAkB,sBAAMH,UAAW,0BAAjB,gCACnBT,EAAMkB,SACH,sBAAMT,UAAWQ,EAAjB,SAAoCjB,EAAMhC,eAD5B,sBAAMyC,UAAW,qBAAjB,8CAK9B,sBAAKA,UAAW,UAAhB,UACI,cAAC,EAAD,CAAQN,KAAM,WACNF,QAASD,EAAMmB,gBACfjB,SAAUF,EAAMe,kBAAkBK,wBAC1C,cAAC,EAAD,CAAQjB,KAAM,QACNF,QAASD,EAAMqB,aACfnB,SAAUF,EAAMe,kBAAkBO,qBAE1C,cAAC,IAAD,CAAMiB,GAAI,YAAV,SACI,cAAC,EAAD,CAAQpC,KAAM,iBCzBrBqC,EAAwD,SAACxC,GAClE,OACI,sBAAKS,UAAU,YAAf,UACI,sBAAKA,UAAW,uBAAhB,UACI,sBAAKA,UAAW,yBAAhB,UACI,6CACA,cAAC,EAAD,CAAOF,MAAOP,EAAM7B,SACbqC,SAAUR,EAAMW,YAChBL,MAAON,EAAMY,qBAGxB,sBAAKH,UAAW,yBAAhB,UACI,6CACA,cAAC,EAAD,CAAOF,MAAOP,EAAM5B,SACboC,SAAUR,EAAMa,YAChBP,MAAON,EAAMY,wBAI5B,qBAAKH,UAAW,UAAhB,SACI,cAAC,IAAD,CAAM8B,GAAI,WAAV,SACI,cAAC,EAAD,CAAQpC,KAAM,MAAOF,QAASD,EAAMc,sBAC5BZ,SAAUF,EAAMY,0BCZ/B6B,EAAiD,SAACzC,GAC3D,OACI,qBAAKS,UAAW,UAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOiC,KAAM,IAAKC,OAAK,EAACC,OAAQ,kBAAM,cAAC,IAAD,CAAUL,GAAI,gBACpD,cAAC,IAAD,CAAOG,KAAM,YAAaE,OAAQ,kBAAM,cAAC,EAAD,CAAkBxE,SAAU4B,EAAM5B,SAChBD,SAAU6B,EAAM7B,SAChB+C,SAAUlB,EAAMkB,SAChBP,YAAaX,EAAMW,YACnBE,YAAab,EAAMa,YACnBC,sBAAuBd,EAAMc,sBAC7BF,gBAAiBZ,EAAMY,qBAEjF,cAAC,IAAD,CAAO8B,KAAM,WAAYE,OAAQ,kBAAM,cAAC,EAAD,CAAiB5E,aAAcgC,EAAMhC,aACpBI,SAAU4B,EAAM5B,SAChBD,SAAU6B,EAAM7B,SAChB+C,SAAUlB,EAAMkB,SAChBC,gBAAiBnB,EAAMmB,gBACvBE,aAAcrB,EAAMqB,aACpBT,gBAAiBZ,EAAMY,gBACvBG,kBAAmBf,EAAMe,6BC/BpF8B,EAA2B,WAAO,IACpC7E,EAAgB0D,aAAY,SAAClD,GAAD,OAAsBA,EAAMK,mBAAxDb,aADmC,EAEb0D,aAAY,SAAClD,GAAD,OAAsBA,EAAMM,yBAA9DX,EAFmC,EAEnCA,SAAUC,EAFyB,EAEzBA,SAFyB,EAGVuD,oBAAS,GAHC,mBAGnCT,EAHmC,KAGzBU,EAHyB,KAIpCC,EAAWC,cAyBXlB,EAAkBzC,GAAYC,GAAYD,EAAW,GAAKC,EAAW,EAErE2C,EAAoB,CACtBK,sBAAuBpD,IAAiBI,IAAa8C,GAAYN,EACjEU,mBAAoBtD,IAAiBG,IAAa+C,GAAYN,GAGlE,OACI,mCACI,cAAC,EAAD,CAAiB5C,aAAcA,EACdG,SAAUA,EACVC,SAAUA,EACV8C,SAAUA,EACVC,gBApCD,WACpBnD,EAAeI,GAAYyD,EfjBK,CACpCnD,KAAMd,KeoDmByD,aAjCJ,WACjBQ,EfjBsB,SAAC1D,GAAD,MAAuB,CACjDO,KAAMb,EACNc,QAASR,GeeI4D,CAAe5D,KAiCHwC,YA9BL,SAACqB,GACjBH,Eb1BqB,SAAC1D,GAAD,MAAuB,CAChDO,KAAMT,EACNU,QAASR,GawBI8D,CAAcC,OAAOF,EAAEG,cAAc5B,SAC9CqB,GAAY,IA6BSf,YA1BL,SAACmB,GACjBH,Eb1BqB,SAACzD,GAAD,MAAuB,CAChDM,KAAMR,EACNS,QAASP,GawBIgE,CAAcF,OAAOF,EAAEG,cAAc5B,SAC9CqB,GAAY,IAyBSd,sBAtBK,WAC1Be,Ef1B+B,SAAC1D,GAAD,MAAuB,CAC1DO,KAAMZ,EACNa,QAASR,GewBIkE,CAAwBlE,IACjCyD,GAAY,IAqBShB,gBAAiBA,EACjBG,kBAAmBA,OCrDhD+B,IAASF,OACL,cAAC,IAAMG,WAAP,UACI,eAAC,IAAD,CAAUhE,MAAOA,EAAjB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,SAGRiE,SAASC,eAAe,SAG5B9F,M","file":"static/js/main.87cae571.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const COUNTER_INCREASE = 'Counter/COUNTER_INCREASE'\r\nexport const COUNTER_RESET = 'Counter/COUNTER_RESET'\r\nexport const SET_NEW_MIN_COUNTER_VALUE = 'Counter/SET_NEW_MIN_COUNTER_VALUE'\r\n\r\nexport const counterIncreaseAC = () => ({\r\n    type: COUNTER_INCREASE,\r\n}) as const\r\n\r\nexport const counterResetAC = (minValue: number) => ({\r\n    type: COUNTER_RESET,\r\n    payload: minValue\r\n}) as const\r\n\r\nexport const setNewMinCounterValueAC = (minValue: number) => ({\r\n    type: SET_NEW_MIN_COUNTER_VALUE,\r\n    payload: minValue\r\n})\r\n\r\nexport type CounterActionsType =\r\n    ReturnType<typeof counterIncreaseAC> |\r\n    ReturnType<typeof counterResetAC> |\r\n    ReturnType<typeof setNewMinCounterValueAC>","import {\r\n    COUNTER_INCREASE,\r\n    COUNTER_RESET,\r\n    CounterActionsType,\r\n    SET_NEW_MIN_COUNTER_VALUE\r\n} from '../../actions/counter-actions/counter-actions'\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    counterValue: 0,\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: CounterActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case COUNTER_INCREASE:\r\n            return {...state, counterValue: state.counterValue + 1}\r\n\r\n        case COUNTER_RESET:\r\n        case SET_NEW_MIN_COUNTER_VALUE:\r\n            return {...state, counterValue: action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n","export const SET_MIN_VALUE = 'Counter/SET_MIN_VALUE'\r\nexport const SET_MAX_VALUE = 'Counter/SET_MAX_VALUE'\r\n\r\nexport const setMinValueAC = (minValue: number) => ({\r\n    type: SET_MIN_VALUE,\r\n    payload: minValue\r\n}) as const\r\n\r\nexport const setMaxValueAC = (maxValue: number) => ({\r\n    type: SET_MAX_VALUE,\r\n    payload: maxValue\r\n}) as const\r\n\r\n\r\nexport type CounterValuesActionsType = ReturnType<typeof setMinValueAC> | ReturnType<typeof setMaxValueAC>","import {\r\n    CounterValuesActionsType,\r\n    SET_MAX_VALUE,\r\n    SET_MIN_VALUE\r\n} from '../../actions/counter-actions/counter-values-actions'\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    minValue: 0,\r\n    maxValue: 5,\r\n}\r\n\r\nexport const counterValuesReducer = (state: InitialStateType = initialState, action: CounterValuesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_MIN_VALUE:\r\n            return {...state, minValue: action.payload}\r\n\r\n        case SET_MAX_VALUE:\r\n            return {...state, maxValue: action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","export const COUNTER_INCREASE = 'CombinedCounter/COUNTER_INCREASE'\r\nexport const COUNTER_RESET = 'CombinedCounter/COUNTER_RESET'\r\nexport const SET_NEW_MIN_COUNTER_VALUE = 'CombinedCounter/SET_NEW_MIN_COUNTER_VALUE'\r\n\r\nexport const counterIncreaseAC = () => ({\r\n    type: COUNTER_INCREASE,\r\n}) as const\r\n\r\nexport const counterResetAC = (minValue: number) => ({\r\n    type: COUNTER_RESET,\r\n    payload: minValue\r\n}) as const\r\n\r\nexport const setNewMinCounterValueAC = (minValue: number) => ({\r\n    type: SET_NEW_MIN_COUNTER_VALUE,\r\n    payload: minValue\r\n})\r\n\r\nexport type CombinedCounterActionsType =\r\n    ReturnType<typeof counterIncreaseAC> |\r\n    ReturnType<typeof counterResetAC> |\r\n    ReturnType<typeof setNewMinCounterValueAC>","import {\r\n    CombinedCounterActionsType,\r\n    COUNTER_INCREASE, COUNTER_RESET, SET_NEW_MIN_COUNTER_VALUE\r\n} from '../../actions/combined-counter-actions/combined-counter-actions'\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    counterValue: 0,\r\n}\r\n\r\nexport const combinedCounterReducer = (state: InitialStateType = initialState, action: CombinedCounterActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case COUNTER_INCREASE:\r\n            return {...state, counterValue: state.counterValue + 1}\r\n\r\n        case COUNTER_RESET:\r\n            return {...state, counterValue: action.payload}\r\n\r\n        case SET_NEW_MIN_COUNTER_VALUE:\r\n            return {...state, counterValue: action.payload}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","export const SET_MIN_VALUE = 'CombinedCounter/SET_MIN_VALUE'\r\nexport const SET_MAX_VALUE = 'CombinedCounter/SET_MAX_VALUE'\r\n\r\nexport const setMinValueAC = (minValue: number) => ({\r\n    type: SET_MIN_VALUE,\r\n    payload: minValue\r\n}) as const\r\n\r\nexport const setMaxValueAC = (maxValue: number) => ({\r\n    type: SET_MAX_VALUE,\r\n    payload: maxValue\r\n}) as const\r\n\r\n\r\nexport type CombinedCounterValuesActionsType = ReturnType<typeof setMinValueAC> | ReturnType<typeof setMaxValueAC>","import {\r\n    CombinedCounterValuesActionsType, SET_MAX_VALUE,\r\n    SET_MIN_VALUE\r\n} from '../../actions/combined-counter-actions/combined-counter-values-actions'\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    minValue: 0,\r\n    maxValue: 5,\r\n}\r\n\r\nexport const combinedCounterValuesReducer = (state: InitialStateType = initialState, action: CombinedCounterValuesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_MIN_VALUE:\r\n            return {...state, minValue: action.payload}\r\n\r\n        case SET_MAX_VALUE:\r\n            return {...state, maxValue: action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from 'redux'\r\nimport {counterReducer} from './reducers/counter-reducers/counter-reducer'\r\nimport {counterValuesReducer} from './reducers/counter-reducers/counter-values-reducer'\r\nimport {combinedCounterReducer} from './reducers/combined-counter-reducers/combined-counter-reducer'\r\nimport {combinedCounterValuesReducer} from './reducers/combined-counter-reducers/combined-counter-values-reducer'\r\nimport {loadState, saveState} from '../utils/local-storage-utils'\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        counter: counterReducer,\r\n        counterValues: counterValuesReducer,\r\n        combinedCounter: combinedCounterReducer,\r\n        combinedCounterValues: combinedCounterValuesReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState())\r\n})","import {StateType} from '../store/store'\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const preloadedState = localStorage.getItem('state')\r\n        return preloadedState === null ? undefined : JSON.parse(preloadedState)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: StateType) => {\r\n    try {\r\n        const loadedState = JSON.stringify(state)\r\n        localStorage.setItem('state', loadedState)\r\n    } catch {\r\n    }\r\n}","import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick?: () => void\r\n    disabled?: boolean | undefined\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <button onClick={props.onClick} disabled={props.disabled}>{props.name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error: boolean | undefined\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = (props) => {\r\n    const inputClassName = props.error ? 'error' : ''\r\n    return <input type=\"number\" value={props.value} onChange={props.onChange} className={inputClassName}/>\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {Button} from '../../Button/Button'\r\nimport {Input} from '../../Input/Input'\r\n\r\ntype CounterSettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    setMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    inputValidation: boolean\r\n    settings: boolean\r\n    setNewMinCounterValue: () => void\r\n    buttonsValidation: boolean\r\n}\r\n\r\nexport const Settings: React.FC<CounterSettingsPropsType> = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={'settingsInputWrapper'}>\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Min value</span>\r\n                    <Input value={props.minValue}\r\n                           onChange={props.setMinValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Max value</span>\r\n                    <Input value={props.maxValue}\r\n                           onChange={props.setMaxValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Set'} onClick={props.setNewMinCounterValue}\r\n                        disabled={props.buttonsValidation}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Button} from '../../Button/Button'\r\nimport React from 'react'\r\n\r\ntype CounterDisplayPropsType = {\r\n    counterValue: number\r\n    maxValue: number\r\n    minValue: number\r\n    inputValidation: boolean\r\n    settings: boolean\r\n    counterIncrease: () => void\r\n    counterReset: () => void\r\n    buttonsValidation: {\r\n        increaseButtonDisable: boolean\r\n        resetButtonDisable: boolean\r\n    }\r\n}\r\n\r\nexport const Display: React.FC<CounterDisplayPropsType> = (props) => {\r\n    const displayClassName = props.counterValue === props.maxValue ? 'result maxResult' : 'result'\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={'display'}>\r\n                {\r\n                    props.inputValidation\r\n                        ? <span className={'result displayTextError'}> Incorrect value! </span>\r\n                        : !props.settings\r\n                            ? <span className={'result displayText'}> Enter values and press 'Set' </span>\r\n                            : <span className={displayClassName}>{props.counterValue}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Increase'}\r\n                        onClick={props.counterIncrease}\r\n                        disabled={props.buttonsValidation.increaseButtonDisable}/>\r\n                <Button name={'Reset'}\r\n                        onClick={props.counterReset}\r\n                        disabled={props.buttonsValidation.resetButtonDisable}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\nimport '../../App.css'\nimport {Settings} from './Settings/Settings'\nimport {Display} from './Display/Display'\n\ntype CounterPropsType = {\n    counterValue: number\n    maxValue: number\n    minValue: number\n    settings: boolean\n    inputValidation: boolean\n    setMinValue: (e: ChangeEvent<HTMLInputElement>) => void\n    setMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\n    setNewMinCounterValue: () => void\n    counterIncrease: () => void\n    counterReset: () => void\n    buttonsValidation: buttonsValidationType\n}\n\ntype buttonsValidationType = {\n    increaseButtonDisable: boolean\n    resetButtonDisable: boolean\n    setButtonDisable: boolean\n}\n\nexport const Counter: React.FC<CounterPropsType> = (props) => {\n    return (\n        <div className={'wrapper'}>\n            <Settings maxValue={props.maxValue}\n                      minValue={props.minValue}\n                      settings={props.settings}\n                      setMinValue={props.setMinValue}\n                      setMaxValue={props.setMaxValue}\n                      setNewMinCounterValue={props.setNewMinCounterValue}\n                      buttonsValidation={props.buttonsValidation.setButtonDisable}\n                      inputValidation={props.inputValidation}\n            />\n\n            <Display counterValue={props.counterValue}\n                     maxValue={props.maxValue}\n                     minValue={props.minValue}\n                     settings={props.settings}\n                     counterIncrease={props.counterIncrease}\n                     counterReset={props.counterReset}\n                     inputValidation={props.inputValidation}\n                     buttonsValidation={props.buttonsValidation}\n            />\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport {Counter} from './Counter'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {StateType} from '../../store/store'\r\nimport {\r\n    counterIncreaseAC,\r\n    counterResetAC,\r\n    setNewMinCounterValueAC\r\n} from '../../store/actions/counter-actions/counter-actions'\r\nimport {setMaxValueAC, setMinValueAC} from '../../store/actions/counter-actions/counter-values-actions'\r\n\r\nexport const CounterContainer = () => {\r\n    const {counterValue} = useSelector((state: StateType) => state.counter)\r\n    const {minValue, maxValue} = useSelector((state: StateType) => state.counterValues)\r\n    const [settings, setSettings] = useState(true)\r\n    const dispatch = useDispatch()\r\n\r\n    const counterIncrease = () => {\r\n        counterValue < maxValue && dispatch(counterIncreaseAC())\r\n    }\r\n\r\n    const counterReset = () => {\r\n        dispatch(counterResetAC(minValue))\r\n    }\r\n\r\n    const setMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMinValueAC(Number(e.currentTarget.value)))\r\n        setSettings(false)\r\n    }\r\n\r\n    const setMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMaxValueAC(Number(e.currentTarget.value)))\r\n        setSettings(false)\r\n    }\r\n\r\n    const setNewMinCounterValue = () => {\r\n        dispatch(setNewMinCounterValueAC(minValue))\r\n        setSettings(true)\r\n    }\r\n\r\n    const inputValidation = minValue >= maxValue || minValue < 0 || maxValue < 0\r\n\r\n    const buttonsValidation = {\r\n        increaseButtonDisable: counterValue === maxValue || !settings || inputValidation,\r\n        resetButtonDisable: counterValue === minValue || !settings || inputValidation,\r\n        setButtonDisable: settings || inputValidation\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Counter counterValue={counterValue}\r\n                     minValue={minValue}\r\n                     maxValue={maxValue}\r\n                     settings={settings}\r\n                     counterIncrease={counterIncrease}\r\n                     counterReset={counterReset}\r\n                     setMinValue={setMinValue}\r\n                     setMaxValue={setMaxValue}\r\n                     setNewMinCounterValue={setNewMinCounterValue}\r\n                     inputValidation={inputValidation}\r\n                     buttonsValidation={buttonsValidation}\r\n\r\n            />\r\n        </>\r\n    )\r\n}","import {Button} from '../../Button/Button'\r\nimport React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\ntype DisplayCombinedPropsType = {\r\n    counterValue: number\r\n    maxValue: number\r\n    minValue: number\r\n    inputValidation: boolean\r\n    settings: boolean\r\n    counterIncrease: () => void\r\n    counterReset: () => void\r\n    buttonsValidation: {\r\n        increaseButtonDisable: boolean\r\n        resetButtonDisable: boolean\r\n    }\r\n}\r\n\r\nexport const DisplayCombined: React.FC<DisplayCombinedPropsType> = (props) => {\r\n    const displayClassName = props.counterValue === props.maxValue ? 'result maxResult' : 'result'\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={'display'}>\r\n                {\r\n                    props.inputValidation ? <span className={'result displayTextError'}> Incorrect value! </span> :\r\n                        !props.settings ? <span className={'result displayText'}> Enter values and press 'Set' </span> :\r\n                            <span className={displayClassName}>{props.counterValue}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Increase'}\r\n                        onClick={props.counterIncrease}\r\n                        disabled={props.buttonsValidation.increaseButtonDisable}/>\r\n                <Button name={'Reset'}\r\n                        onClick={props.counterReset}\r\n                        disabled={props.buttonsValidation.resetButtonDisable}/>\r\n\r\n                <Link to={'/settings'}>\r\n                    <Button name={'Set'}/>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Button} from '../../Button/Button'\r\nimport {Input} from '../../Input/Input'\r\n\r\ntype SettingsCombinedPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    setMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    inputValidation: boolean\r\n    settings: boolean\r\n    setNewMinCounterValue: () => void\r\n}\r\n\r\nexport const SettingsCombined: React.FC<SettingsCombinedPropsType> = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={'settingsInputWrapper'}>\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Min value</span>\r\n                    <Input value={props.minValue}\r\n                           onChange={props.setMinValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n\r\n                <div className={'settingsInputContainer'}>\r\n                    <span>Max value</span>\r\n                    <Input value={props.maxValue}\r\n                           onChange={props.setMaxValue}\r\n                           error={props.inputValidation}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Link to={'/display'}>\r\n                    <Button name={'Set'} onClick={props.setNewMinCounterValue}\r\n                            disabled={props.inputValidation}/>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react'\nimport '../../App.css'\nimport {HashRouter, Redirect, Route} from 'react-router-dom'\nimport {DisplayCombined} from './Display/DisplayCombined'\nimport {SettingsCombined} from './Settings/SettingsCombined'\n\ntype CombinedCounterType = {\n    counterValue: number\n    maxValue: number\n    minValue: number\n    settings: boolean\n    inputValidation: boolean\n    setMinValue: (e: ChangeEvent<HTMLInputElement>) => void\n    setMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\n    setNewMinCounterValue: () => void\n    counterIncrease: () => void\n    counterReset: () => void\n    buttonsValidation: buttonsValidationType\n}\n\ntype buttonsValidationType = {\n    increaseButtonDisable: boolean\n    resetButtonDisable: boolean\n}\n\nexport const CombinedCounter: React.FC<CombinedCounterType> = (props) => {\n    return (\n        <div className={'wrapper'}>\n            <HashRouter>\n                <Route path={'/'} exact render={() => <Redirect to={'/display'}/>}/>\n                <Route path={'/settings'} render={() => <SettingsCombined maxValue={props.maxValue}\n                                                                          minValue={props.minValue}\n                                                                          settings={props.settings}\n                                                                          setMinValue={props.setMinValue}\n                                                                          setMaxValue={props.setMaxValue}\n                                                                          setNewMinCounterValue={props.setNewMinCounterValue}\n                                                                          inputValidation={props.inputValidation}\n                />}/>\n                <Route path={'/display'} render={() => <DisplayCombined counterValue={props.counterValue}\n                                                                        maxValue={props.maxValue}\n                                                                        minValue={props.minValue}\n                                                                        settings={props.settings}\n                                                                        counterIncrease={props.counterIncrease}\n                                                                        counterReset={props.counterReset}\n                                                                        inputValidation={props.inputValidation}\n                                                                        buttonsValidation={props.buttonsValidation}\n                />}/>\n            </HashRouter>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport {CombinedCounter} from './CombinedCounter'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {StateType} from '../../store/store'\r\nimport {\r\n    counterIncreaseAC,\r\n    counterResetAC,\r\n    setNewMinCounterValueAC\r\n} from '../../store/actions/combined-counter-actions/combined-counter-actions'\r\nimport {\r\n    setMaxValueAC,\r\n    setMinValueAC\r\n} from '../../store/actions/combined-counter-actions/combined-counter-values-actions'\r\n\r\nexport const CombinedCounterContainer = () => {\r\n    const {counterValue} = useSelector((state: StateType) => state.combinedCounter)\r\n    const {minValue, maxValue} = useSelector((state: StateType) => state.combinedCounterValues)\r\n    const [settings, setSettings] = useState(true)\r\n    const dispatch = useDispatch()\r\n\r\n    const counterIncrease = () => {\r\n        counterValue < maxValue && dispatch(counterIncreaseAC())\r\n    }\r\n\r\n    const counterReset = () => {\r\n        dispatch(counterResetAC(minValue))\r\n    }\r\n\r\n    const setMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMinValueAC(Number(e.currentTarget.value)))\r\n        setSettings(false)\r\n    }\r\n\r\n    const setMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMaxValueAC(Number(e.currentTarget.value)))\r\n        setSettings(false)\r\n    }\r\n\r\n    const setNewMinCounterValue = () => {\r\n        dispatch(setNewMinCounterValueAC(minValue))\r\n        setSettings(true)\r\n    }\r\n\r\n    const inputValidation = minValue >= maxValue || minValue < 0 || maxValue < 0\r\n\r\n    const buttonsValidation = {\r\n        increaseButtonDisable: counterValue === maxValue || !settings || inputValidation,\r\n        resetButtonDisable: counterValue === minValue || !settings || inputValidation,\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CombinedCounter counterValue={counterValue}\r\n                             minValue={minValue}\r\n                             maxValue={maxValue}\r\n                             settings={settings}\r\n                             counterIncrease={counterIncrease}\r\n                             counterReset={counterReset}\r\n                             setMinValue={setMinValue}\r\n                             setMaxValue={setMaxValue}\r\n                             setNewMinCounterValue={setNewMinCounterValue}\r\n                             inputValidation={inputValidation}\r\n                             buttonsValidation={buttonsValidation}\r\n            />\r\n        </>\r\n    )\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport {Provider} from 'react-redux'\nimport {store} from './store/store'\nimport {CounterContainer} from './components/Counter/CounterContainer'\nimport {CombinedCounterContainer} from './components/CombinedCounter/CombinedCounterContainer'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <CounterContainer/>\n            <CombinedCounterContainer/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}