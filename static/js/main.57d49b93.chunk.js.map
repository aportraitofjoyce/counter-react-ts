{"version":3,"sources":["components/Button.tsx","components/Input.tsx","components/CounterSettings/CounterSettings.tsx","components/CounterDisplay/Display.tsx","components/CounterDisplay/CounterDisplay.tsx","Counter.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","onClick","callback","disabled","name","Input","inputClassName","error","type","value","onChange","className","CounterSettings","minValue","e","setMinValue","Number","currentTarget","validation","maxValue","setMaxValue","setCounter","Display","displayClassName","counter","CounterDisplay","Counter","useState","useEffect","counterValueString","localStorage","getItem","counterValueNumber","JSON","parse","minValueString","minValueNumber","maxValueString","maxValueNumber","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57d49b93.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled: any\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <button onClick={props.callback} disabled={props.disabled}>{props.name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error: boolean | undefined\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = (props) => {\r\n    const inputClassName = props.error ? 'error' : ''\r\n    return <input type=\"number\" value={props.value} onChange={props.onChange} className={inputClassName}/>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"../Button\";\r\nimport {Input} from \"../Input\";\r\n\r\ntype CounterSettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (minValue: number) => void\r\n    setMaxValue: (maxValue: number) => void\r\n    setCounter: (counter: number) => void\r\n    validation: () => boolean | undefined\r\n}\r\n\r\nexport const CounterSettings: React.FC<CounterSettingsPropsType> = (props) => {\r\n    const declareMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMinValue(Number(e.currentTarget.value))\r\n    }\r\n\r\n    const declareMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxValue(Number(e.currentTarget.value))\r\n    }\r\n\r\n    const setMinValueToCounter = () => {\r\n        props.setCounter(props.minValue)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className={'settingsInputContainer'}>\r\n                <span>Min value</span>\r\n                <Input value={props.minValue}\r\n                       onChange={declareMinValue}\r\n                       error={props.validation()}\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className={'settingsInputContainer'}>\r\n                <span>Max value</span>\r\n                <Input value={props.maxValue}\r\n                       onChange={declareMaxValue}\r\n                       error={props.validation()}\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className={'buttons'}>\r\n                <Button name={'Set'} callback={setMinValueToCounter} disabled={props.validation()}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    validation: () => boolean | undefined\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    const displayClassName = props.counter === props.maxValue ? 'result maxResult' : 'result'\r\n\r\n    return (\r\n        <div className={'display'}>\r\n            {props.validation() ?\r\n                <span className={'result'}>Incorrect value!</span> :\r\n                <span className={displayClassName}>{props.counter}</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import {Display} from \"./Display\";\r\nimport {Button} from \"../Button\";\r\nimport React from \"react\";\r\n\r\ntype CounterDisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    setCounter: (counter: number) => void\r\n    validation: () => boolean | undefined\r\n}\r\n\r\nexport const CounterDisplay: React.FC<CounterDisplayPropsType> = (props) => {\r\n    const counterIncrease = () => {\r\n        props.counter < props.maxValue && props.setCounter(props.counter + 1)\r\n    }\r\n\r\n    const counterReset = () => {\r\n        props.setCounter(props.minValue)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Display counter={props.counter} maxValue={props.maxValue} validation={props.validation} minValue={props.minValue}/>\r\n            <div className={'buttons'}>\r\n                <Button name={'Increase'} callback={counterIncrease} disabled={props.counter === props.maxValue}/>\r\n                <Button name={'Reset'} callback={counterReset} disabled={props.counter === props.minValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {CounterSettings} from \"./components/CounterSettings/CounterSettings\";\nimport {CounterDisplay} from \"./components/CounterDisplay/CounterDisplay\";\n\nconst Counter = () => {\n    const [minValue, setMinValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [counter, setCounter] = useState<number>(minValue)\n\n    useEffect(() => {\n        const counterValueString = localStorage.getItem('counterValue')\n        if (counterValueString) {\n            const counterValueNumber = JSON.parse(counterValueString)\n            setCounter(counterValueNumber)\n        }\n\n        const minValueString = localStorage.getItem('minValue')\n        if (minValueString) {\n            const minValueNumber = JSON.parse(minValueString)\n            setMinValue(minValueNumber)\n        }\n\n        const maxValueString = localStorage.getItem('maxValue')\n        if (maxValueString) {\n            const maxValueNumber = JSON.parse(maxValueString)\n            setMaxValue(maxValueNumber)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(counter))\n        localStorage.setItem('minValue', JSON.stringify(minValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }, [counter, minValue, maxValue])\n\n    const validation = () => {\n        if (minValue >= maxValue) return true\n        if (minValue < 0 || maxValue < 0) return true\n    }\n\n    return (\n        <div className={'wrapper'}>\n            <CounterSettings maxValue={maxValue}\n                             minValue={minValue}\n                             setMinValue={setMinValue}\n                             setMaxValue={setMaxValue}\n                             setCounter={setCounter}\n                             validation={validation}\n            />\n\n            <CounterDisplay counter={counter}\n                            maxValue={maxValue}\n                            minValue={minValue}\n                            setCounter={setCounter}\n                            validation={validation}\n            />\n        </div>\n    );\n};\n\nexport default Counter;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Counter from './Counter';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}