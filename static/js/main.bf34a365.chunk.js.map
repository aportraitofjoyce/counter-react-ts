{"version":3,"sources":["components/Display.tsx","components/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","displayClassName","counter","className","Button","onClick","callback","disabled","name","App","useState","setCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAMaA,EAAU,SAACC,GACpB,IAAMC,EACgB,IAAlBD,EAAME,QAAgB,mBACA,IAAlBF,EAAME,QAAgB,mBACA,IAAlBF,EAAME,QAAgB,qBACA,IAAlBF,EAAME,QAAgB,oBACA,IAAlBF,EAAME,QAAgB,mBAAqB,SAG/D,OACI,qBAAKC,UAAW,UAAhB,SACI,sBAAMA,UAAWF,EAAjB,SAAoCD,EAAME,aCTzCE,EAAS,SAACJ,GACnB,OACI,wBAAQK,QAASL,EAAMM,SAAUC,SAAUP,EAAMO,SAAjD,SAA4DP,EAAMQ,QCoB3DC,MAzBf,WACI,IADW,EAGmBC,mBAFb,GADN,mBAGJR,EAHI,KAGKS,EAHL,KAaX,OACI,sBAAKR,UAAU,UAAf,UACI,cAAC,EAAD,CAASD,QAASA,IAClB,sBAAKC,UAAW,UAAhB,UACI,cAAC,EAAD,CAAQK,KAAM,WAAYF,SAZd,WACpBJ,EAJa,GAISS,EAAWT,EAAU,IAWkBK,SAfhD,IAe0DL,IAC/D,cAAC,EAAD,CAAQM,KAAM,QAASF,SATd,WACjBK,EATa,IAiB0CJ,SAjB1C,IAiBoDL,WCT1DU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bf34a365.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    const displayClassName = (\r\n        props.counter === 1 ? 'result resultOne' :\r\n            props.counter === 2 ? 'result resultTwo' :\r\n                props.counter === 3 ? 'result resultThree' :\r\n                    props.counter === 4 ? 'result resultFour' :\r\n                        props.counter === 5 ? 'result maxResult' : 'result'\r\n    )\r\n\r\n    return (\r\n        <div className={'display'}>\r\n            <span className={displayClassName}>{props.counter}</span>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return (\r\n        <button onClick={props.callback} disabled={props.disabled}>{props.name}</button>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Display} from \"./components/Display\";\nimport {Button} from \"./components/Button\";\n\nfunction App() {\n    const minValue = 0\n    const maxValue = 5\n    const [counter, setCounter] = useState<number>(minValue)\n\n    const counterIncrease = () => {\n        counter < maxValue && setCounter(counter + 1)\n    }\n\n    const counterReset = () => {\n        setCounter(minValue)\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <Display counter={counter}/>\n            <div className={'buttons'}>\n                <Button name={'Increase'} callback={counterIncrease} disabled={counter === maxValue}/>\n                <Button name={'Reset'} callback={counterReset} disabled={counter === minValue}/>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}